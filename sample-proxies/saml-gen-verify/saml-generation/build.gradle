buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.apigee:apiproxy-plugin:1.0'
    }
}
plugins {
    id "com.github.tkruse.groovysh" version "1.0.8"
    id 'groovy'
}

apply plugin: 'apiproxy'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    compile(
            'com.github.groovy-wslite:groovy-wslite:1.1.2',
            'org.codehaus.groovy:groovy-all:2.4.5',
            'org.apache.ant:ant:1.7.1',
            'com.apigee:apiproxy:1.0'
    )

    testRuntime(
            'cglib:cglib-nodep:3.1',
            'org.objenesis:objenesis:2.1'
    )

    testCompile(
            'org.spockframework:spock-core:1.0-groovy-2.4',
            "junit:junit:4.10",
            "org.hamcrest:hamcrest-core:1.3"
    )

}

test {
    systemProperty 'application', proxyApplication
    systemProperty 'username', proxyUsername
    systemProperty 'password', proxyPassword
    systemProperty 'apikey', proxyApiKey
    systemProperty 'apisecret', proxyApiSecret
    systemProperty 'hostURL', proxyHostURL
    systemProperty 'orgName', proxyOrgName
    systemProperty 'envName', proxyEnvName
    systemProperty 'application', proxyApplication
    systemProperty 'apiVersion', proxyApiVersion
    systemProperty 'projectVersion', proxyProjectVersion
    systemProperty 'buildDirectory', proxyBuildDirectory
    systemProperty 'apiProxySource', proxyApiProxySource
    systemProperty 'revision', proxyRevision
    systemProperty 'baseDirectory', System.properties.'user.dir'
}

apiproxy {
    hostURL = proxyHostURL
    orgName = proxyOrgName
    envName = proxyEnvName
    application = proxyApplication
    apiVersion = proxyApiVersion
    projectVersion = proxyProjectVersion
    username = proxyUsername
    password = proxyPassword
    buildDirectory = proxyBuildDirectory
    baseDirectory = System.properties.'user.dir'
    apiProxySource = proxyApiProxySource
    revision = proxyRevision
}

groovysh {
    shell {
        args = [
                '-e', "username='carlos.frias.01@gmail.com'",
                '-e', "password='P1zr5pDxhzhu'",
                '-e', ". apiproxySetup.groovy"
        ]
    }
}

task createX509Certificate(type: Exec) {
    description 'Create the key.pem and cert.pem into src/main/resources.'
    commandLine 'openssl'
    args(
            'req',
            '-x509',
            '-newkey', 'rsa:2048',
            '-keyout', "${keyFilename}",
            '-out', "${certificateFilename}",
            '-days', '730',
            '-passin', 'pass:password',
            '-passout', 'pass:password',
            '-subj', '/C=US/ST=Florida/L=Jacksonville/O=Apigee/OU=Customer Success/CN=apigee.com'
    )
}

task createX509Descriptor() {
    description 'Create and update descriptor.properties'

    doLast {
        ant.mkdir dir: 'src/main/resources/META-INF'
        def descriptor = file('src/main/resources/META-INF/descriptor.properties')
        if (descriptor.exists()) descriptor.delete()
        descriptor << "certFile=${new File(certificateFilename).name}\n"
        descriptor << "keyFile=${new File(keyFilename).name}\n"
    }
}
task createX509CertificateJar(type: Jar) {
    description 'Create Jar for use on Apigee Edge that contains the descriptor, cert and key files'
    from(
            keyFilename,
            certificateFilename
    )
    into('META-INF') {
        from 'src/main/resources/META-INF'
    }
}

task createX509EnvironmentKeystore(type: JavaExec) {
    description 'Create keystore in Apigee environment'
    main = 'apigee.CreateKeystore'
    classpath = sourceSets.main.runtimeClasspath
}


createX509CertificateJar.dependsOn << createX509Certificate
createX509CertificateJar.dependsOn << createX509Descriptor